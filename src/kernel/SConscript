import os

from SCons.Environment import Environment
from build_scripts.utility import GlobRecursive, FindIndex, IsFileName

Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('kernel.map').path
    ],
    CPPPATH = [ 
        env.Dir('.').srcnode(),
        env['PROJECTDIR'].Dir('src/libs')
    ],
    ASFLAGS = [ '-I', env.Dir('.').srcnode(), '-f', 'elf' ]
)

# âœ… Collect sources, but exclude screen.c to avoid vga_putchar() conflict
from itertools import chain

all_c_files = list(chain.from_iterable(GlobRecursive(env, '*.c')))
sources = [
    src for src in all_c_files
    if not IsFileName(src, 'screen.c')
] + \
list(chain.from_iterable(GlobRecursive(env, '*.cpp'))) + \
list(chain.from_iterable(GlobRecursive(env, '*.asm')))

objects = env.Object(sources)

# Reorder crt objects
obj_crti = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crti.o')))
obj_crtn = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crtn.o')))

Import('libcore')

static_libs = [
    libcore,
]

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    *static_libs,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]

# Link kernel ELF
kernel = env.Program('kernel.elf', objects)

# Strip symbols for final image
kernel_stripped = env.Command('kernel-stripped.elf', kernel, '$STRIP -o $TARGET $SOURCE')
env.Default(kernel_stripped)

Export('kernel')
Export('kernel_stripped')