import os
import re
from pathlib import Path
import parted
import sh

from SCons.Action import Action
from SCons.Environment import Environment
from build_scripts.utility import FindIndex, GlobRecursive, IsFileName

Import('stage1')
Import('stage2')
Import('kernel')
Import('TARGET_ENVIRONMENT')

TARGET_ENVIRONMENT: Environment
env: Environment = TARGET_ENVIRONMENT

SECTOR_SIZE = 512

def generate_image_file(target: str, size_sectors: int):
    with open(target, 'wb') as fout:
        fout.write(bytes(size_sectors * SECTOR_SIZE))

def create_filesystem(target: str, filesystem, reserved_sectors=0, offset=0):
    if filesystem in ['fat12', 'fat16', 'fat32']:
        reserved_sectors += 1
        if filesystem == 'fat32':
            reserved_sectors += 1

        mkfs_fat = sh.Command('mkfs.fat')
        mkfs_fat(target,
                 F=filesystem[3:],
                 n='NBOS',
                 R=reserved_sectors,
                 offset=offset
        )
    else:
        raise ValueError('Unsupported filesystem ' + filesystem)

def find_symbol_in_map_file(map_file: str, symbol: str):
    with map_file.open('r') as fmap:
        for line in fmap:
            if symbol in line:
                match = re.search('0x([0-9a-fA-F]+)', line)
                if match is not None:
                    return int(match.group(1), base=16)
    return None

def install_stage1(target: str, stage1: str, stage2_offset, stage2_size, offset=0):
    map_file = Path(stage1).with_suffix('.map')
    if not map_file.exists():
        raise ValueError("Can't find " + map_file)

    entry_offset = find_symbol_in_map_file(map_file, '__entry_start')
    if entry_offset is None:
        raise ValueError("Can't find __entry_start symbol in map file " + str(map_file))
    entry_offset -= 0x7C00

    stage2_start = find_symbol_in_map_file(map_file, 'stage2_location')
    if stage2_start is None:
        raise ValueError("Can't find stage2_location symbol in map file " + str(map_file))
    stage2_start -= 0x7C00

    with open(stage1, 'rb') as fstage1:
        with os.fdopen(os.open(target, os.O_WRONLY | os.O_CREAT), 'rb+', buffering=0) as ftarget:
            ftarget.seek(offset * SECTOR_SIZE)
            ftarget.write(fstage1.read(3))
            fstage1.seek(entry_offset - 3, os.SEEK_CUR)
            ftarget.seek(entry_offset - 3, os.SEEK_CUR)
            ftarget.write(fstage1.read())
            ftarget.seek(offset * SECTOR_SIZE + stage2_start)
            ftarget.write(stage2_offset.to_bytes(4, byteorder='little'))
            ftarget.write(stage2_size.to_bytes(1, byteorder='little'))

def install_stage2(target: str, stage2: str, offset=0, limit=None):
    with open(stage2, 'rb') as fstage2:
        with os.fdopen(os.open(target, os.O_WRONLY | os.O_CREAT), 'rb+', buffering=0) as ftarget:
            ftarget.seek(offset * SECTOR_SIZE)
            ftarget.write(fstage2.read())

def build_disk(image, stage1, stage2, kernel, files, env):
    size_sectors = (env['imageSize'] + SECTOR_SIZE - 1) // SECTOR_SIZE
    file_system = env['imageFS']
    partition_offset = 2048
    fat_offset = partition_offset * SECTOR_SIZE
    fat_arg = f"{image}@@{fat_offset}"

    stage1_size = os.stat(stage1).st_size
    stage2_size = os.stat(stage2).st_size
    stage2_sectors = (stage2_size + SECTOR_SIZE - 1) // SECTOR_SIZE

    generate_image_file(image, size_sectors)

    print("> creating partition table...")
    device = parted.getDevice(image)
    disk = parted.freshDisk(device, 'msdos')
    freeSpace = disk.getFreeSpaceRegions()
    partitionGeometry = parted.Geometry(device, partition_offset, end=freeSpace[-1].end)
    partition = parted.Partition(disk=disk, type=parted.PARTITION_NORMAL, geometry=partitionGeometry)
    partition.setFlag(parted.PARTITION_BOOT)
    disk.addPartition(partition, constraint=device.optimalAlignedConstraint)
    disk.commit()

    print("> formatting file using", file_system, "...")
    create_filesystem(image, file_system, offset=partition_offset)

    print("> installing stage1...")
    install_stage1(image, stage1, offset=partition_offset, stage2_offset=1, stage2_size=stage2_sectors)

    print("> installing stage2...")
    install_stage2(image, stage2, offset=1)

    print("> copying kernel...")
    sh.mmd('-i', fat_arg, '::boot')
    sh.mcopy('-i', fat_arg, kernel, '::boot/kernel.elf')

    print("> copying files...")
    src_root = env['BASEDIR']
    for file in files:
        file_src = file.srcnode().path

        # Skip ADS (alternate data stream) files or other invalid entries
        if ':' in os.path.basename(file_src) or not os.path.exists(file_src):
            print(f"    skipping invalid file: {file_src}")
            continue

        file_rel = os.path.relpath(file_src, src_root)
        file_dst = '::' + file_rel.replace("\\", "/")

        if os.path.isdir(file_src):
            print('    ... creating directory', file_rel)
            sh.mmd('-i', fat_arg, file_dst)
        else:
            print('    ... copying file:', file_rel)
            sh.mcopy('-i', fat_arg, file_src, file_dst)

def build_image(target, source, env):
    stage1 = str(source[0])
    stage2 = str(source[1])
    kernel = str(source[2])
    files = source[3:]

    image = str(target[0])
    build_disk(image, stage1, stage2, kernel, files, env)

root = env.Dir('root')
root_content = GlobRecursive(env, '*', root)
inputs = [stage1, stage2, kernel] + root_content

output_fmt = 'img'
output = f'image.{output_fmt}'

image = env.Command(output, inputs,
                    action=Action(build_image, 'Creating disk image...'),
                    BASEDIR=root.srcnode().path)
env.Depends(image, inputs)

Export('image')